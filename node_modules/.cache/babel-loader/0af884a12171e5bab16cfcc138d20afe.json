{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carmen.johnson\\\\Documents\\\\workspace\\\\React\\\\crwnBase\\\\src\\\\contexts\\\\cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n  useEffect(() => {\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    setCartTotal(newCartTotal);\n  }, [cartItems]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemToCart = cartItemToRemove => {\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    setCartItems(clearCartItem(cartItems, cartItemToClear));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"Q34pEVQNnwOC1WPCa5SwU/+yuyE=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/carmen.johnson/Documents/workspace/React/crwnBase/src/contexts/cart.context.jsx"],"names":["createContext","useState","useEffect","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","cartTotal","CartProvider","children","setCartItems","setCartCount","setCartTotal","newCartCount","reduce","total","newCartTotal","price","removeItemToCart","value"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\n\r\nconst addCartItem = (cartItems, productToAdd) => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === productToAdd.id\r\n  );\r\n\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === productToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\r\n};\r\n\r\nconst removeCartItem = (cartItems, cartItemToRemove) => {\r\n  // find the cart item to remove\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  // check if quantity is equal to 1, if it is remove that item from the cart\r\n  if (existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\r\n  }\r\n\r\n  // return back cartitems with matching cart item with reduced quantity\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n\r\nconst clearCartItem = (cartItems, cartItemToClear) =>\r\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\r\n\r\nexport const CartContext = createContext({\r\n  isCartOpen: false,\r\n  setIsCartOpen: () => {},\r\n  cartItems: [],\r\n  addItemToCart: () => {},\r\n  removeItemFromCart: () => {},\r\n  clearItemFromCart: () => {},\r\n  cartCount: 0,\r\n  cartTotal: 0,\r\n});\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [isCartOpen, setIsCartOpen] = useState(false);\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [cartCount, setCartCount] = useState(0);\r\n  const [cartTotal, setCartTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const newCartCount = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity,\r\n      0\r\n    );\r\n    setCartCount(newCartCount);\r\n  }, [cartItems]);\r\n\r\n  useEffect(() => {\r\n    const newCartTotal = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\r\n      0\r\n    );\r\n    setCartTotal(newCartTotal);\r\n  }, [cartItems]);\r\n\r\n  const addItemToCart = (productToAdd) => {\r\n    setCartItems(addCartItem(cartItems, productToAdd));\r\n  };\r\n\r\n  const removeItemToCart = (cartItemToRemove) => {\r\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\r\n  };\r\n\r\n  const clearItemFromCart = (cartItemToClear) => {\r\n    setCartItems(clearCartItem(cartItems, cartItemToClear));\r\n  };\r\n\r\n  const value = {\r\n    isCartOpen,\r\n    setIsCartOpen,\r\n    addItemToCart,\r\n    removeItemToCart,\r\n    clearItemFromCart,\r\n    cartItems,\r\n    cartCount,\r\n    cartTotal,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}