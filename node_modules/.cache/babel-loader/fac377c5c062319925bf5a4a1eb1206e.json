{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjVbKu1NUQ8T1I92ygrzdH-ft6G_KHDOc\",\n  authDomain: \"crwn-clothing-dbcj.firebaseapp.com\",\n  projectId: \"crwn-clothing-dbcj\",\n  storageBucket: \"crwn-clothing-dbcj.firebasestorage.app\",\n  messagingSenderId: \"300382403894\",\n  appId: \"1:300382403894:web:08edf2252872590f828797\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd, field) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit(); //console.log('done');\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories');\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n  return categoryMap;\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"sources":["C:/Users/carmen.johnson/Documents/workspace/React/crwnBase/src/utils/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","field","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","acc","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"mappings":"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","sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport {\r\n  getAuth,\r\n  signInWithRedirect,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from 'firebase/auth';\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  collection,\r\n  writeBatch,\r\n  query,\r\n  getDocs,\r\n} from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyBjVbKu1NUQ8T1I92ygrzdH-ft6G_KHDOc\",\r\n\tauthDomain: \"crwn-clothing-dbcj.firebaseapp.com\",\r\n\tprojectId: \"crwn-clothing-dbcj\",\r\n\tstorageBucket: \"crwn-clothing-dbcj.firebasestorage.app\",\r\n\tmessagingSenderId: \"300382403894\",\r\n\tappId: \"1:300382403894:web:08edf2252872590f828797\",\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\ngoogleProvider.setCustomParameters({\r\n  prompt: 'select_account',\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () =>\r\n  signInWithPopup(auth, googleProvider);\r\nexport const signInWithGoogleRedirect = () =>\r\n  signInWithRedirect(auth, googleProvider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd,\r\n  field\r\n) => {\r\n  const collectionRef = collection(db, collectionKey);\r\n  const batch = writeBatch(db);\r\n\r\n  objectsToAdd.forEach((object) => {\r\n    const docRef = doc(collectionRef, object.title.toLowerCase());\r\n    batch.set(docRef, object);\r\n  });\r\n\r\n  await batch.commit();\r\n  //console.log('done');\r\n};\r\n\r\nexport const getCategoriesAndDocuments = async () => {\r\n  const collectionRef = collection(db, 'categories');\r\n  const q = query(collectionRef);\r\n\r\n  const querySnapshot = await getDocs(q);\r\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\r\n    const { title, items } = docSnapshot.data();\r\n    acc[title.toLowerCase()] = items;\r\n    return acc;\r\n  }, {});\r\n\r\n  return categoryMap;\r\n};\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth,\r\n  additionalInformation = {}\r\n) => {\r\n  if (!userAuth) return;\r\n\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n  const userSnapshot = await getDoc(userDocRef);\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating the user', error.message);\r\n    }\r\n  }\r\n\r\n  return userDocRef;\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListener = (callback) =>\r\n  onAuthStateChanged(auth, callback);\r\n"]},"metadata":{},"sourceType":"module"}